//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gram.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LPAREN=2, RPAREN=3, LBRACE=4, RBRACE=5, ADD=6, SUB=7, MUL=8, DIV=9, 
		MOD=10, ASS=11, EQ=12, NEQ=13, LE=14, LEQ=15, GE=16, GEQ=17, AND=18, OR=19, 
		NOT=20, TRUE=21, FALSE=22, IF=23, WHILE=24, PRINT=25, SCAN=26, NUMBER=27, 
		NUM_VAR=28, BOOL_VAR=29;
	public const int
		RULE_program = 0, RULE_expressions = 1, RULE_if_statement = 2, RULE_while_loop = 3, 
		RULE_print_call = 4, RULE_scan_call = 5, RULE_assignment = 6, RULE_comparisson_type = 7, 
		RULE_logic_operator = 8, RULE_aritmetic_operator_strong = 9, RULE_aritmetic_operator_weak = 10, 
		RULE_bool_value = 11, RULE_numeric_value = 12;
	public static readonly string[] ruleNames = {
		"program", "expressions", "if_statement", "while_loop", "print_call", 
		"scan_call", "assignment", "comparisson_type", "logic_operator", "aritmetic_operator_strong", 
		"aritmetic_operator_weak", "bool_value", "numeric_value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
		"'True'", "'False'", "'if'", "'while'", "'print'", "'scan'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "ADD", "SUB", "MUL", 
		"DIV", "MOD", "ASS", "EQ", "NEQ", "LE", "LEQ", "GE", "GEQ", "AND", "OR", 
		"NOT", "TRUE", "FALSE", "IF", "WHILE", "PRINT", "SCAN", "NUMBER", "NUM_VAR", 
		"BOOL_VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_callContext print_call() {
			return GetRuleContext<Print_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scan_callContext scan_call() {
			return GetRuleContext<Scan_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				{
				State = 28;
				if_statement();
				}
				break;
			case WHILE:
				{
				State = 29;
				while_loop();
				}
				break;
			case PRINT:
				{
				State = 30;
				print_call();
				}
				break;
			case SCAN:
				{
				State = 31;
				scan_call();
				}
				break;
			case NUM_VAR:
			case BOOL_VAR:
				{
				State = 32;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 931135488L) != 0)) {
				{
				State = 35;
				expressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GramParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(GramParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(GramParser.RBRACE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(IF);
			State = 39;
			Match(LPAREN);
			State = 40;
			bool_value(0);
			State = 41;
			Match(RPAREN);
			State = 42;
			Match(LBRACE);
			State = 43;
			expressions();
			State = 44;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(GramParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(GramParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(GramParser.RBRACE, 0); }
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 6, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(WHILE);
			State = 47;
			Match(LPAREN);
			State = 48;
			bool_value(0);
			State = 49;
			Match(RPAREN);
			State = 50;
			Match(LBRACE);
			State = 51;
			expressions();
			State = 52;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_callContext : ParserRuleContext {
		public Print_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_call; } }
	 
		public Print_callContext() { }
		public virtual void CopyFrom(Print_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintNumContext : Print_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(GramParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public PrintNumContext(Print_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintBoolContext : Print_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(GramParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public PrintBoolContext(Print_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_callContext print_call() {
		Print_callContext _localctx = new Print_callContext(Context, State);
		EnterRule(_localctx, 8, RULE_print_call);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new PrintNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(PRINT);
				State = 55;
				Match(LPAREN);
				State = 56;
				numeric_value(0);
				State = 57;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new PrintBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				Match(PRINT);
				State = 60;
				Match(LPAREN);
				State = 61;
				bool_value(0);
				State = 62;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_callContext : ParserRuleContext {
		public Scan_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_call; } }
	 
		public Scan_callContext() { }
		public virtual void CopyFrom(Scan_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScanBoolContext : Scan_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCAN() { return GetToken(GramParser.SCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VAR() { return GetToken(GramParser.BOOL_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public ScanBoolContext(Scan_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScanNumContext : Scan_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCAN() { return GetToken(GramParser.SCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_VAR() { return GetToken(GramParser.NUM_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public ScanNumContext(Scan_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_callContext scan_call() {
		Scan_callContext _localctx = new Scan_callContext(Context, State);
		EnterRule(_localctx, 10, RULE_scan_call);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ScanNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				Match(SCAN);
				State = 67;
				Match(LPAREN);
				State = 68;
				Match(NUM_VAR);
				State = 69;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new ScanBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				Match(SCAN);
				State = 71;
				Match(LPAREN);
				State = 72;
				Match(BOOL_VAR);
				State = 73;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignBoolContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VAR() { return GetToken(GramParser.BOOL_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASS() { return GetToken(GramParser.ASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public AssignBoolContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignNumContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_VAR() { return GetToken(GramParser.NUM_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASS() { return GetToken(GramParser.ASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public AssignNumContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_VAR:
				_localctx = new AssignNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				Match(NUM_VAR);
				State = 77;
				Match(ASS);
				State = 78;
				numeric_value(0);
				}
				break;
			case BOOL_VAR:
				_localctx = new AssignBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				Match(BOOL_VAR);
				State = 80;
				Match(ASS);
				State = 81;
				bool_value(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparisson_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(GramParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(GramParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(GramParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQ() { return GetToken(GramParser.LEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(GramParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQ() { return GetToken(GramParser.GEQ, 0); }
		public Comparisson_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisson_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisson_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparisson_typeContext comparisson_type() {
		Comparisson_typeContext _localctx = new Comparisson_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparisson_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GramParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GramParser.OR, 0); }
		public Logic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_operatorContext logic_operator() {
		Logic_operatorContext _localctx = new Logic_operatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_logic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aritmetic_operator_strongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(GramParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GramParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GramParser.MOD, 0); }
		public Aritmetic_operator_strongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aritmetic_operator_strong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmetic_operator_strong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aritmetic_operator_strongContext aritmetic_operator_strong() {
		Aritmetic_operator_strongContext _localctx = new Aritmetic_operator_strongContext(Context, State);
		EnterRule(_localctx, 18, RULE_aritmetic_operator_strong);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1792L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aritmetic_operator_weakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(GramParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(GramParser.SUB, 0); }
		public Aritmetic_operator_weakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aritmetic_operator_weak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmetic_operator_weak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aritmetic_operator_weakContext aritmetic_operator_weak() {
		Aritmetic_operator_weakContext _localctx = new Aritmetic_operator_weakContext(Context, State);
		EnterRule(_localctx, 20, RULE_aritmetic_operator_weak);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
	 
		public Bool_valueContext() { }
		public virtual void CopyFrom(Bool_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenBoolValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public ParenBoolValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenBoolVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparisson_typeContext comparisson_type() {
			return GetRuleContext<Comparisson_typeContext>(0);
		}
		public CompValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(GramParser.TRUE, 0); }
		public TrueValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext[] bool_value() {
			return GetRuleContexts<Bool_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value(int i) {
			return GetRuleContext<Bool_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logic_operatorContext logic_operator() {
			return GetRuleContext<Logic_operatorContext>(0);
		}
		public LogicValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GramParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public NotValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolVarValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VAR() { return GetToken(GramParser.BOOL_VAR, 0); }
		public BoolVarValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolVarVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseValContext : Bool_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(GramParser.FALSE, 0); }
		public FalseValContext(Bool_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		return bool_value(0);
	}

	private Bool_valueContext bool_value(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_valueContext _localctx = new Bool_valueContext(Context, _parentState);
		Bool_valueContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_bool_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new BoolVarValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 93;
				Match(BOOL_VAR);
				}
				break;
			case 2:
				{
				_localctx = new TrueValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94;
				Match(TRUE);
				}
				break;
			case 3:
				{
				_localctx = new FalseValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(FALSE);
				}
				break;
			case 4:
				{
				_localctx = new NotValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96;
				Match(NOT);
				State = 97;
				bool_value(4);
				}
				break;
			case 5:
				{
				_localctx = new CompValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98;
				numeric_value(0);
				State = 99;
				comparisson_type();
				State = 100;
				numeric_value(0);
				}
				break;
			case 6:
				{
				_localctx = new ParenBoolValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102;
				Match(LPAREN);
				State = 103;
				bool_value(0);
				State = 104;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicValContext(new Bool_valueContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bool_value);
					State = 108;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 109;
					logic_operator();
					State = 110;
					bool_value(3);
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Numeric_valueContext : ParserRuleContext {
		public Numeric_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_value; } }
	 
		public Numeric_valueContext() { }
		public virtual void CopyFrom(Numeric_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AritStrongValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aritmetic_operator_strongContext aritmetic_operator_strong() {
			return GetRuleContext<Aritmetic_operator_strongContext>(0);
		}
		public AritStrongValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritStrongVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GramParser.NUMBER, 0); }
		public NumValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumVarValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_VAR() { return GetToken(GramParser.NUM_VAR, 0); }
		public NumVarValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumVarVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenNumValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GramParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GramParser.RPAREN, 0); }
		public ParenNumValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenNumVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(GramParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public SubValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AritWeakValContext : Numeric_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aritmetic_operator_weakContext aritmetic_operator_weak() {
			return GetRuleContext<Aritmetic_operator_weakContext>(0);
		}
		public AritWeakValContext(Numeric_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramVisitor<TResult> typedVisitor = visitor as IGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritWeakVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_valueContext numeric_value() {
		return numeric_value(0);
	}

	private Numeric_valueContext numeric_value(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Numeric_valueContext _localctx = new Numeric_valueContext(Context, _parentState);
		Numeric_valueContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_numeric_value, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				_localctx = new NumValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 118;
				Match(NUMBER);
				}
				break;
			case NUM_VAR:
				{
				_localctx = new NumVarValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(NUM_VAR);
				}
				break;
			case SUB:
				{
				_localctx = new SubValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				Match(SUB);
				State = 121;
				numeric_value(4);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenNumValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122;
				Match(LPAREN);
				State = 123;
				numeric_value(0);
				State = 124;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 136;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new AritStrongValContext(new Numeric_valueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeric_value);
						State = 128;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 129;
						aritmetic_operator_strong();
						State = 130;
						numeric_value(4);
						}
						break;
					case 2:
						{
						_localctx = new AritWeakValContext(new Numeric_valueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_numeric_value);
						State = 132;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 133;
						aritmetic_operator_weak();
						State = 134;
						numeric_value(3);
						}
						break;
					}
					} 
				}
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return bool_value_sempred((Bool_valueContext)_localctx, predIndex);
		case 12: return numeric_value_sempred((Numeric_valueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_value_sempred(Bool_valueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool numeric_value_sempred(Numeric_valueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,142,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,3,1,34,8,1,1,1,3,1,37,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
		4,65,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,75,8,5,1,6,1,6,1,6,1,6,1,
		6,1,6,3,6,83,8,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,107,8,11,1,11,1,
		11,1,11,1,11,5,11,113,8,11,10,11,12,11,116,9,11,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,3,12,127,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,5,12,137,8,12,10,12,12,12,140,9,12,1,12,0,2,22,24,13,0,2,4,6,8,10,
		12,14,16,18,20,22,24,0,4,1,0,12,17,1,0,18,19,1,0,8,10,1,0,6,7,147,0,26,
		1,0,0,0,2,33,1,0,0,0,4,38,1,0,0,0,6,46,1,0,0,0,8,64,1,0,0,0,10,74,1,0,
		0,0,12,82,1,0,0,0,14,84,1,0,0,0,16,86,1,0,0,0,18,88,1,0,0,0,20,90,1,0,
		0,0,22,106,1,0,0,0,24,126,1,0,0,0,26,27,3,2,1,0,27,1,1,0,0,0,28,34,3,4,
		2,0,29,34,3,6,3,0,30,34,3,8,4,0,31,34,3,10,5,0,32,34,3,12,6,0,33,28,1,
		0,0,0,33,29,1,0,0,0,33,30,1,0,0,0,33,31,1,0,0,0,33,32,1,0,0,0,34,36,1,
		0,0,0,35,37,3,2,1,0,36,35,1,0,0,0,36,37,1,0,0,0,37,3,1,0,0,0,38,39,5,23,
		0,0,39,40,5,2,0,0,40,41,3,22,11,0,41,42,5,3,0,0,42,43,5,4,0,0,43,44,3,
		2,1,0,44,45,5,5,0,0,45,5,1,0,0,0,46,47,5,24,0,0,47,48,5,2,0,0,48,49,3,
		22,11,0,49,50,5,3,0,0,50,51,5,4,0,0,51,52,3,2,1,0,52,53,5,5,0,0,53,7,1,
		0,0,0,54,55,5,25,0,0,55,56,5,2,0,0,56,57,3,24,12,0,57,58,5,3,0,0,58,65,
		1,0,0,0,59,60,5,25,0,0,60,61,5,2,0,0,61,62,3,22,11,0,62,63,5,3,0,0,63,
		65,1,0,0,0,64,54,1,0,0,0,64,59,1,0,0,0,65,9,1,0,0,0,66,67,5,26,0,0,67,
		68,5,2,0,0,68,69,5,28,0,0,69,75,5,3,0,0,70,71,5,26,0,0,71,72,5,2,0,0,72,
		73,5,29,0,0,73,75,5,3,0,0,74,66,1,0,0,0,74,70,1,0,0,0,75,11,1,0,0,0,76,
		77,5,28,0,0,77,78,5,11,0,0,78,83,3,24,12,0,79,80,5,29,0,0,80,81,5,11,0,
		0,81,83,3,22,11,0,82,76,1,0,0,0,82,79,1,0,0,0,83,13,1,0,0,0,84,85,7,0,
		0,0,85,15,1,0,0,0,86,87,7,1,0,0,87,17,1,0,0,0,88,89,7,2,0,0,89,19,1,0,
		0,0,90,91,7,3,0,0,91,21,1,0,0,0,92,93,6,11,-1,0,93,107,5,29,0,0,94,107,
		5,21,0,0,95,107,5,22,0,0,96,97,5,20,0,0,97,107,3,22,11,4,98,99,3,24,12,
		0,99,100,3,14,7,0,100,101,3,24,12,0,101,107,1,0,0,0,102,103,5,2,0,0,103,
		104,3,22,11,0,104,105,5,3,0,0,105,107,1,0,0,0,106,92,1,0,0,0,106,94,1,
		0,0,0,106,95,1,0,0,0,106,96,1,0,0,0,106,98,1,0,0,0,106,102,1,0,0,0,107,
		114,1,0,0,0,108,109,10,2,0,0,109,110,3,16,8,0,110,111,3,22,11,3,111,113,
		1,0,0,0,112,108,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,
		0,115,23,1,0,0,0,116,114,1,0,0,0,117,118,6,12,-1,0,118,127,5,27,0,0,119,
		127,5,28,0,0,120,121,5,7,0,0,121,127,3,24,12,4,122,123,5,2,0,0,123,124,
		3,24,12,0,124,125,5,3,0,0,125,127,1,0,0,0,126,117,1,0,0,0,126,119,1,0,
		0,0,126,120,1,0,0,0,126,122,1,0,0,0,127,138,1,0,0,0,128,129,10,3,0,0,129,
		130,3,18,9,0,130,131,3,24,12,4,131,137,1,0,0,0,132,133,10,2,0,0,133,134,
		3,20,10,0,134,135,3,24,12,3,135,137,1,0,0,0,136,128,1,0,0,0,136,132,1,
		0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,25,1,0,0,0,140,
		138,1,0,0,0,10,33,36,64,74,82,106,114,126,136,138
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
