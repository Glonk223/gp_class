//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gram.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GramLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LPAREN=2, RPAREN=3, LBRACE=4, RBRACE=5, ADD=6, SUB=7, MUL=8, DIV=9, 
		MOD=10, ASS=11, EQ=12, NEQ=13, LE=14, LEQ=15, GE=16, GEQ=17, AND=18, OR=19, 
		NOT=20, TRUE=21, FALSE=22, IF=23, WHILE=24, PRINT=25, SCAN=26, NUMBER=27, 
		NUM_VAR=28, BOOL_VAR=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "ADD", "SUB", "MUL", "DIV", 
		"MOD", "ASS", "EQ", "NEQ", "LE", "LEQ", "GE", "GEQ", "AND", "OR", "NOT", 
		"TRUE", "FALSE", "IF", "WHILE", "PRINT", "SCAN", "NUMBER", "NUM_VAR", 
		"BOOL_VAR"
	};


	public GramLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GramLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
		"'True'", "'False'", "'if'", "'while'", "'print'", "'scan'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "ADD", "SUB", "MUL", 
		"DIV", "MOD", "ASS", "EQ", "NEQ", "LE", "LEQ", "GE", "GEQ", "AND", "OR", 
		"NOT", "TRUE", "FALSE", "IF", "WHILE", "PRINT", "SCAN", "NUMBER", "NUM_VAR", 
		"BOOL_VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GramLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,160,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,4,0,61,8,0,11,0,12,0,62,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
		4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,
		1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
		1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
		1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,4,26,143,8,26,11,26,
		12,26,144,1,26,1,26,4,26,149,8,26,11,26,12,26,150,3,26,153,8,26,1,27,1,
		27,1,27,1,28,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
		19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
		43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,2,3,0,9,10,13,13,32,
		32,1,0,48,57,163,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,60,1,0,0,0,3,66,1,0,0,0,5,68,1,0,0,
		0,7,70,1,0,0,0,9,72,1,0,0,0,11,74,1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,
		17,80,1,0,0,0,19,82,1,0,0,0,21,84,1,0,0,0,23,86,1,0,0,0,25,89,1,0,0,0,
		27,92,1,0,0,0,29,94,1,0,0,0,31,97,1,0,0,0,33,99,1,0,0,0,35,102,1,0,0,0,
		37,105,1,0,0,0,39,108,1,0,0,0,41,110,1,0,0,0,43,115,1,0,0,0,45,121,1,0,
		0,0,47,124,1,0,0,0,49,130,1,0,0,0,51,136,1,0,0,0,53,142,1,0,0,0,55,154,
		1,0,0,0,57,157,1,0,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,
		1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,6,0,0,0,65,2,1,0,0,0,66,67,5,
		40,0,0,67,4,1,0,0,0,68,69,5,41,0,0,69,6,1,0,0,0,70,71,5,123,0,0,71,8,1,
		0,0,0,72,73,5,125,0,0,73,10,1,0,0,0,74,75,5,43,0,0,75,12,1,0,0,0,76,77,
		5,45,0,0,77,14,1,0,0,0,78,79,5,42,0,0,79,16,1,0,0,0,80,81,5,47,0,0,81,
		18,1,0,0,0,82,83,5,37,0,0,83,20,1,0,0,0,84,85,5,61,0,0,85,22,1,0,0,0,86,
		87,5,61,0,0,87,88,5,61,0,0,88,24,1,0,0,0,89,90,5,33,0,0,90,91,5,61,0,0,
		91,26,1,0,0,0,92,93,5,60,0,0,93,28,1,0,0,0,94,95,5,60,0,0,95,96,5,61,0,
		0,96,30,1,0,0,0,97,98,5,62,0,0,98,32,1,0,0,0,99,100,5,62,0,0,100,101,5,
		61,0,0,101,34,1,0,0,0,102,103,5,38,0,0,103,104,5,38,0,0,104,36,1,0,0,0,
		105,106,5,124,0,0,106,107,5,124,0,0,107,38,1,0,0,0,108,109,5,33,0,0,109,
		40,1,0,0,0,110,111,5,84,0,0,111,112,5,114,0,0,112,113,5,117,0,0,113,114,
		5,101,0,0,114,42,1,0,0,0,115,116,5,70,0,0,116,117,5,97,0,0,117,118,5,108,
		0,0,118,119,5,115,0,0,119,120,5,101,0,0,120,44,1,0,0,0,121,122,5,105,0,
		0,122,123,5,102,0,0,123,46,1,0,0,0,124,125,5,119,0,0,125,126,5,104,0,0,
		126,127,5,105,0,0,127,128,5,108,0,0,128,129,5,101,0,0,129,48,1,0,0,0,130,
		131,5,112,0,0,131,132,5,114,0,0,132,133,5,105,0,0,133,134,5,110,0,0,134,
		135,5,116,0,0,135,50,1,0,0,0,136,137,5,115,0,0,137,138,5,99,0,0,138,139,
		5,97,0,0,139,140,5,110,0,0,140,52,1,0,0,0,141,143,7,1,0,0,142,141,1,0,
		0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,152,1,0,0,0,146,
		148,5,46,0,0,147,149,7,1,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,
		0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,146,1,0,0,0,152,153,1,0,0,0,
		153,54,1,0,0,0,154,155,5,88,0,0,155,156,7,1,0,0,156,56,1,0,0,0,157,158,
		5,76,0,0,158,159,7,1,0,0,159,58,1,0,0,0,5,0,62,144,150,152,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
