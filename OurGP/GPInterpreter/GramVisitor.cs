//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gram.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GramParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IGramVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] GramParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.expressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressions([NotNull] GramParser.ExpressionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_statement([NotNull] GramParser.If_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.while_loop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhile_loop([NotNull] GramParser.While_loopContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>printNum</c>
	/// labeled alternative in <see cref="GramParser.print_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrintNum([NotNull] GramParser.PrintNumContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>printBool</c>
	/// labeled alternative in <see cref="GramParser.print_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrintBool([NotNull] GramParser.PrintBoolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>scanNum</c>
	/// labeled alternative in <see cref="GramParser.scan_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScanNum([NotNull] GramParser.ScanNumContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>scanBool</c>
	/// labeled alternative in <see cref="GramParser.scan_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScanBool([NotNull] GramParser.ScanBoolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignNum</c>
	/// labeled alternative in <see cref="GramParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignNum([NotNull] GramParser.AssignNumContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignBool</c>
	/// labeled alternative in <see cref="GramParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignBool([NotNull] GramParser.AssignBoolContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.comparisson_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisson_type([NotNull] GramParser.Comparisson_typeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.logic_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogic_operator([NotNull] GramParser.Logic_operatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.aritmetic_operator_strong"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAritmetic_operator_strong([NotNull] GramParser.Aritmetic_operator_strongContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="GramParser.aritmetic_operator_weak"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAritmetic_operator_weak([NotNull] GramParser.Aritmetic_operator_weakContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenBoolVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenBoolVal([NotNull] GramParser.ParenBoolValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>compVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompVal([NotNull] GramParser.CompValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>trueVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrueVal([NotNull] GramParser.TrueValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicVal([NotNull] GramParser.LogicValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotVal([NotNull] GramParser.NotValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>boolVarVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolVarVal([NotNull] GramParser.BoolVarValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>falseVal</c>
	/// labeled alternative in <see cref="GramParser.bool_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFalseVal([NotNull] GramParser.FalseValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>aritStrongVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAritStrongVal([NotNull] GramParser.AritStrongValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumVal([NotNull] GramParser.NumValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numVarVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumVarVal([NotNull] GramParser.NumVarValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenNumVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenNumVal([NotNull] GramParser.ParenNumValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubVal([NotNull] GramParser.SubValContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>aritWeakVal</c>
	/// labeled alternative in <see cref="GramParser.numeric_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAritWeakVal([NotNull] GramParser.AritWeakValContext context);
}
